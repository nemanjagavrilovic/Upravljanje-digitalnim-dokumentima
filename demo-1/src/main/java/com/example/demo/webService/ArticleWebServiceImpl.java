package com.example.demo.webService;
/**
 * Please modify this class to meet your needs
 * This class is not complete
 */

import java.util.ArrayList;
import java.util.List;

import javax.jws.WebService;

import org.apache.lucene.search.join.ScoreMode;
import org.elasticsearch.index.query.BoolQueryBuilder;
import org.elasticsearch.index.query.MoreLikeThisQueryBuilder;
import org.elasticsearch.index.query.MoreLikeThisQueryBuilder.Item;
import org.elasticsearch.index.query.QueryBuilders;
import org.springframework.beans.factory.annotation.Autowired;

import com.example.demo.converter.ArticlesToArticleEL;
import com.example.demo.converter.ReviewerToUserConverter;
import com.example.demo.lucene.QueryBuilder;
import com.example.demo.lucene.QueryModel;
import com.example.demo.lucene.SearchType;
import com.example.demo.model.ArticleEL;
import com.example.demo.model.Reviewer;
import com.example.demo.repository.ArticlesRepository;
import com.example.demo.service.SearchQueryService;

/**
 * This class was generated by Apache CXF 2.6.5 2018-12-26T14:46:48.718+01:00
 * Generated source version: 2.6.5
 * 
 */
@WebService(endpointInterface = "com.example.demo.webService.ArticleWebService", serviceName = "ArticleWebService")
public class ArticleWebServiceImpl implements ArticleWebService {

	private ArticlesToArticleEL articleToArticleEl;
	private ReviewerToUserConverter reviewerToUserConverter;
	private ArticlesRepository articlesRepository;
	private SearchQueryService searchQueryService;

	@Autowired
	public ArticleWebServiceImpl(SearchQueryService searchQueryService, ArticlesRepository articlesRepository,
			ArticlesToArticleEL articleToArticleEl,ReviewerToUserConverter reviewerToUserConverter) {
		this.articlesRepository = articlesRepository;
		this.articleToArticleEl = articleToArticleEl;
		this.searchQueryService = searchQueryService;
		this.reviewerToUserConverter = reviewerToUserConverter;
	}

	public java.util.List<com.example.demo.model.ArticleEL> findAll() {
		List<ArticleEL> list = new ArrayList<>();
		try {
			Iterable<ArticleEL> collection = articlesRepository.findAll();
			collection.forEach(list::add);
			return list;
		} catch (Exception ex) {
			ex.printStackTrace();
			throw new RuntimeException(ex);
		}
	}

	public java.util.List<com.example.demo.model.ArticleEL> findByKeywords(java.util.List<java.lang.String> arg0) {
		List<ArticleEL> list = new ArrayList<>();
		try {
			for (String item : arg0) {
				org.elasticsearch.index.query.QueryBuilder retVal = QueryBuilders.termQuery("keywords", item);
				Iterable<ArticleEL> collection = articlesRepository.search(retVal);
				List<ArticleEL> found = new ArrayList<>();
				collection.forEach(found::add);
				for (ArticleEL article : found) {
					if (!contains(list, article.getArticle_id())) {
						list.add(article);
					}
				}
			}
			return list;
		} catch (Exception ex) {
			ex.printStackTrace();
			throw new RuntimeException(ex);
		}
	}

	public java.util.List<com.example.demo.model.ArticleEL> findByMagazineName(java.lang.String name,SearchType type) {
		try {
			List<ArticleEL> articles = searchQueryService.search(type, "magazineName", name);
			if(articles != null)
				return articles;
			else
				return null;
		} catch (Exception ex) {
			ex.printStackTrace();
			throw new RuntimeException(ex);
		}
	}

	public java.util.List<com.example.demo.model.User> moreLikeThis(java.lang.String text) {
		try {
			String[] textForSearch = { text };
			String[] fields = { "text" };
			Iterable<ArticleEL> allArticles = articlesRepository.findAll();
			int number = 0;
			for (ArticleEL article : allArticles) {
				number++;
			}
			Item[] items = new Item[number];
			int count = 0;
			for (ArticleEL article : allArticles) {
				items[count] = new Item("articles", "articles", article.getArticle_id());
				count++;
			}

			MoreLikeThisQueryBuilder query = QueryBuilders.moreLikeThisQuery(fields, textForSearch, items)
					.minTermFreq(1).minDocFreq(1);
			Iterable<ArticleEL> articles = articlesRepository.search(query);
			List<Reviewer> reviewers = new ArrayList<>();
			for (ArticleEL article : articles) {
				reviewers.addAll(article.getReviewers());
			}
			return reviewerToUserConverter.convertList(reviewers);
		} catch (Exception ex) {
			ex.printStackTrace();
			throw new RuntimeException(ex);
		}
	}

	public java.util.List<com.example.demo.model.ArticleEL> findByTitle(java.lang.String title,SearchType type) {
		try {
			List<ArticleEL> articles = searchQueryService.search(type, "title", title);
			if (articles != null)
				return articles;
			else
				return null;
		} catch (Exception ex) {
			ex.printStackTrace();
			throw new RuntimeException(ex);
		}
	}

	@Override
	public ArticleEL save(com.example.demo.model.Article arg0) {
		try {
			ArticleEL ar = articleToArticleEl.convert(arg0);
			return articlesRepository.index(ar);
		} catch (Exception ex) {
			ex.printStackTrace();
			throw new RuntimeException(ex);
		}
	}

	public boolean contains(final List<ArticleEL> list, final String id) {
		return list.stream().filter(o -> o.getArticle_id().equals(id)).findFirst().isPresent();
	}

	public List<ArticleEL> findByScientificField(String scientificField,SearchType type) {
		try {
			List<ArticleEL> articles = searchQueryService.search(type, "scientificField", scientificField);
			if(articles != null)
				return articles;
			else
				return null;
		} catch (Exception ex) {
			ex.printStackTrace();
			throw new RuntimeException(ex);
		}
	}

	@Override
	public List<ArticleEL> booleanQuery(List<QueryModel> queryFields, String operation,SearchType searchType) {
		List<ArticleEL> list = new ArrayList<>();
		try {
			List<org.elasticsearch.index.query.QueryBuilder> queries = new ArrayList<>();
			for (QueryModel query : queryFields) {
				queries.add(QueryBuilder.buildQuery(searchType, query.getField(), query.getValue()));
			}
			BoolQueryBuilder builder = QueryBuilders.boolQuery();
			if (operation.equalsIgnoreCase("AND")) {
				for (org.elasticsearch.index.query.QueryBuilder query : queries) {
					builder.must(query);
				}
			} else if (operation.equalsIgnoreCase("OR")) {
				for (org.elasticsearch.index.query.QueryBuilder query : queries) {
					builder.should(query);
				}
			}
			Iterable<ArticleEL> collection = articlesRepository.search(builder);
			collection.forEach(list::add);
			return list;

		} catch (Exception ex) {
			ex.printStackTrace();
			throw new RuntimeException(ex);
		}
	}
	
	public java.util.List<com.example.demo.model.ArticleEL> findByAbstract(java.lang.String abstracts,com.example.demo.lucene.SearchType type) {  
	        try {
	    		List<ArticleEL> articles = searchQueryService.search(type, "abstracts", abstracts);
				if(articles != null)
					return articles;
				else
					return null;
		
	        } catch (Exception ex) {
	            ex.printStackTrace();
	            throw new RuntimeException(ex);
	        }
	 
	    }
	public java.util.List<com.example.demo.model.ArticleEL> findByNameAndSurname(java.lang.String name,java.lang.String surname,com.example.demo.lucene.SearchType arg2) {  
		List<ArticleEL> list = new ArrayList<>();
		  
		try { 
	        	BoolQueryBuilder builder = QueryBuilders.boolQuery();
	        	org.elasticsearch.index.query.QueryBuilder queryName = QueryBuilder.buildQuery(arg2, "authors.firstName", name);
	        	org.elasticsearch.index.query.QueryBuilder querySurname = QueryBuilder.buildQuery(arg2, "authors.lastName", surname);
	        	
	        	builder.must(queryName);
	        	builder.must(querySurname);
	        	
	        	org.elasticsearch.index.query.QueryBuilder nested = QueryBuilders.nestedQuery("authors", builder, ScoreMode.Avg);
	        	
	        	Iterable<ArticleEL> collection = articlesRepository.search(nested);
				collection.forEach(list::add);
				return list;
	        } catch (Exception ex) {
	            ex.printStackTrace();
	            throw new RuntimeException(ex);
	        }
	 
	    }
}